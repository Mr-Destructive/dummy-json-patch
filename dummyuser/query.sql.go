// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package dummyuser

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, bio, roles, password_hash) VALUES (?, ?, ?, ?, ?) RETURNING id, name, email, bio, roles
`

type CreateUserParams struct {
	Name         string
	Email        string
	Bio          sql.NullString
	Roles        sql.NullString
	PasswordHash string
}

type CreateUserRow struct {
	ID    int64
	Name  string
	Email string
	Bio   sql.NullString
	Roles sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Bio,
		arg.Roles,
		arg.PasswordHash,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Bio,
		&i.Roles,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, bio, roles FROM users WHERE id = ?
`

type GetUserRow struct {
	ID    int64
	Name  string
	Email string
	Bio   sql.NullString
	Roles sql.NullString
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Bio,
		&i.Roles,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, bio, roles from users
`

type ListUsersRow struct {
	ID    int64
	Name  string
	Email string
	Bio   sql.NullString
	Roles sql.NullString
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Bio,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = ?, email = ?, bio = ?, roles = ?  WHERE id = ?
`

type UpdateUserParams struct {
	Name  string
	Email string
	Bio   sql.NullString
	Roles sql.NullString
	ID    int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Bio,
		arg.Roles,
		arg.ID,
	)
	return err
}
